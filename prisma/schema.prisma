datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

model Task {
  id        String   @id @default(cuid())
  name      String
  status    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Phase {
  id       String   @id @default(cuid())
  name     String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  endDate   DateTime
}

model Project {
  id        String   @id @default(cuid())
  name      String
  description String?
  tasks     Task[]
  payments  Payment[]
  files     File[]
  owner     User     @relation(fields: [ownerMail], references: [email])
  ownerMail String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  currency  String
  status    String
  project      Project     @relation(fields: [projectId], references: [id])
  projectId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id       String   @id @default(cuid())
  type     String
  content  String
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String
  image         String?
  notifications Notification[]
  project       Project?
  accounts      Account[]
  sessions      Session[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}